const express = require("express");
const cors = require("cors");
const mysql = require("mysql2/promise"); // S·ª¨ D·ª§NG mysql2/promise
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
// Danh s√°ch c√°c ngu·ªìn g·ªëc (origins) ƒë∆∞·ª£c ph√©p truy c·∫≠p
const allowedOrigins = [
  process.env.CLIENT_URL, // V√≠ d·ª•: 'https://webtuanvaquanfpt-frontend.onrender.com'
  "http://localhost:5173", // M√¥i tr∆∞·ªùng ph√°t tri·ªÉn c·ªßa b·∫°n
  "http://localhost:3000", // C·ªïng ph√°t tri·ªÉn ph·ªï bi·∫øn kh√°c
];

app.use(
  cors({
    origin: function (origin, callback) {
      // Cho ph√©p c√°c request kh√¥ng c√≥ origin (nh∆∞ Postman ho·∫∑c mobile apps)
      if (!origin) return callback(null, true);

      // Cho ph√©p n·∫øu origin n·∫±m trong danh s√°ch
      if (allowedOrigins.indexOf(origin) === -1) {
        const msg =
          "The CORS policy for this site does not allow access from the specified Origin.";
        return callback(new Error(msg), false);
      }
      return callback(null, true);
    },
    credentials: true,
  })
);
app.use(express.json());
// üöÄ C·∫§U H√åNH K·∫æT N·ªêI MYSQL
let dbPool;
try {
  dbPool = mysql.createPool({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    port: process.env.DB_PORT, // <== S·ª¨ D·ª§NG PORT
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0,
    // TH√äM SSL ƒê·ªÇ ƒê√ÅP ·ª®NG Y√äU C·∫¶U B·∫¢O M·∫¨T C·ª¶A C√ÅC HOSTING CLOUD (NH∆Ø RAILWAY)
    ssl: {
      rejectUnauthorized: false,
    },
  });
  console.log("‚úÖ MySQL Pool created successfully");

  // Ki·ªÉm tra k·∫øt n·ªëi
  dbPool
    .getConnection()
    .then((connection) => {
      console.log("üöÄ Connected to MySQL database!");
      connection.release(); // Tr·∫£ l·∫°i k·∫øt n·ªëi
    })
    .catch((err) => {
      console.error("‚ùå Failed to connect to MySQL database:", err.message);
      process.exit(1); // Tho√°t n·∫øu kh√¥ng th·ªÉ k·∫øt n·ªëi
    });
} catch (error) {
  console.error("‚ùå MySQL setup error:", error.message);
  process.exit(1);
}
// Email Transporter
// const transporter = nodemailer.createTransport({
//   service: "gmail",
//   auth: {
//     user: process.env.EMAIL_USER,
//     pass: process.env.EMAIL_PASSWORD,
//   },
// });

// Verify email configuration
// transporter.verify((error, success) => {
//   if (error) {
//     console.log("‚ùå Email configuration error:", error);
//   } else {
//     console.log("‚úÖ Email server is ready to send messages");
//   }
// });

// ‚ö†Ô∏è QUAN TR·ªåNG: ƒê·ªçc admin credentials t·ª´ .env
const ADMIN_EMAIL = process.env.ADMIN_EMAIL || "admin@gmail.com";
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || "tuan0112";

console.log("üîê Admin Credentials Loaded:");
console.log("   Email:", ADMIN_EMAIL);
console.log(
  "   Password:",
  ADMIN_PASSWORD ? "***" + ADMIN_PASSWORD.slice(-4) : "NOT SET"
);

// server.js (Th√™m g·∫ßn c√°c bi·∫øn ADMIN_EMAIL/PASSWORD)

// ===================== COUPON DATA =====================
const COUPONS = [
  { code: "TQ10-CHILL", discount: 10000 },
  { code: "TQ20-VUIVE", discount: 20000 },
  { code: "TQ30-XINCHAO", discount: 30000 },
  { code: "TQ40-TUANQ", discount: 40000 },
  { code: "TQ50-LIXI", discount: 50000 },
  { code: "TQ60-MEMEME", discount: 60000 },
  { code: "TQ70-MUAHE", discount: 70000 },
  { code: "TQ80-ZUIZUI", discount: 80000 },
  { code: "TQ90-DANGCAP", discount: 90000 },
  { code: "TQ100-QUADINH", discount: 100000 },
];
// =======================================================
// ===================== ADMIN ROUTES =====================

// ƒêƒÉng nh·∫≠p admin
app.post("/api/admin/login", (req, res) => {
  try {
    const { email, password } = req.body;

    console.log("üîç Admin login attempt:");
    console.log("   Received email:", email);
    console.log("   Expected email:", ADMIN_EMAIL);
    console.log("   Password match:", password === ADMIN_PASSWORD);

    if (email === ADMIN_EMAIL && password === ADMIN_PASSWORD) {
      const adminToken = Buffer.from(`${email}:${Date.now()}`).toString(
        "base64"
      );

      console.log("‚úÖ Admin login successful");

      res.json({
        success: true,
        message: "ƒêƒÉng nh·∫≠p admin th√†nh c√¥ng!",
        token: adminToken,
        admin: { email: ADMIN_EMAIL, role: "admin" },
      });
    } else {
      console.log("‚ùå Admin login failed - credentials mismatch");
      res.status(401).json({
        success: false,
        message: "Email ho·∫∑c m·∫≠t kh·∫©u admin kh√¥ng ƒë√∫ng!",
      });
    }
  } catch (error) {
    console.error("‚ùå Admin login error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server!",
    });
  }
});

// Middleware ki·ªÉm tra admin token - IMPROVED VERSION
const checkAdminAuth = (req, res, next) => {
  const authHeader = req.headers.authorization;

  console.log("üîê Auth check:");
  console.log("   Header:", authHeader ? "Present" : "Missing");

  if (!authHeader) {
    console.log("‚ùå No authorization header");
    return res.status(401).json({
      success: false,
      message: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p! (Missing token)",
    });
  }

  const token = authHeader.replace("Bearer ", "");

  if (!token) {
    console.log("‚ùå No token after Bearer");
    return res.status(401).json({
      success: false,
      message: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p! (Invalid format)",
    });
  }

  try {
    const decoded = Buffer.from(token, "base64").toString("utf-8");
    console.log(
      "   Decoded token starts with:",
      decoded.substring(0, 20) + "..."
    );

    if (decoded.startsWith(ADMIN_EMAIL + ":")) {
      console.log("‚úÖ Admin authenticated");
      next();
    } else {
      console.log("‚ùå Token does not match admin email");
      res.status(401).json({
        success: false,
        message: "Token kh√¥ng h·ª£p l·ªá!",
      });
    }
  } catch (error) {
    console.log("‚ùå Token decode error:", error.message);
    res.status(401).json({
      success: false,
      message: "Token kh√¥ng h·ª£p l·ªá!",
    });
  }
};
// X√≥a ng∆∞·ªùi d√πng (admin only)
// server.js (T√¨m ƒë·∫øn route app.delete("/api/admin/users/:id", ...) )

app.delete("/api/admin/users/:id", checkAdminAuth, async (req, res) => {
  try {
    const userId = Number(req.params.id);

    if (isNaN(userId)) {
      return res.status(400).json({
        success: false,
        message: "ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá!",
      });
    }

    // 1. Ki·ªÉm tra t·ªìn t·∫°i v√† ƒë·∫øm s·ªë ƒë∆°n h√†ng c·∫ßn x√≥a
    const [userOrders] = await dbPool.query(
      "SELECT COUNT(id) as count FROM orders WHERE userId = ?",
      [userId]
    );
    const deletedOrdersCount = userOrders[0].count;

    // 2. X√≥a ng∆∞·ªùi d√πng (Orders s·∫Ω t·ª± ƒë·ªông x√≥a nh·ªù ON DELETE CASCADE)
    const [deleteResult] = await dbPool.query(
      "DELETE FROM users WHERE id = ?",
      [userId]
    );

    if (deleteResult.affectedRows === 0) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!",
      });
    }

    console.log(
      `‚úÖ Ng∆∞·ªùi d√πng #${userId} ƒë√£ b·ªã x√≥a b·ªüi admin. X√≥a ${deletedOrdersCount} ƒë∆°n h√†ng li√™n quan.`
    );

    res.json({
      success: true,
      message: "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!",
      deletedOrdersCount: deletedOrdersCount,
    });
  } catch (error) {
    console.error("‚ùå Delete user error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi x√≥a ng∆∞·ªùi d√πng!",
      error: error.message,
    });
  }
});
// L·∫•y dashboard stats
// server.js (T√¨m ƒë·∫øn route app.get("/api/admin/stats", ...) )

app.get("/api/admin/stats", checkAdminAuth, async (req, res) => {
  try {
    // 1. L·∫•y t·ªïng ƒë∆°n h√†ng
    const [totalOrdersResult] = await dbPool.query(
      "SELECT COUNT(id) AS count FROM orders"
    );
    const totalOrders = totalOrdersResult[0].count;

    // 2. L·∫•y t·ªïng doanh thu (ch·ªâ c√°c ƒë∆°n ƒë√£ ho√†n th√†nh)
    const [totalRevenueResult] = await dbPool.query(
      "SELECT SUM(total) AS sum FROM orders WHERE status = 'completed'"
    );
    const totalRevenue = Number(totalRevenueResult[0].sum) || 0; // Chuy·ªÉn sang Number, n·∫øu NULL th√¨ l√† 0

    // 3. L·∫•y t·ªïng ng∆∞·ªùi d√πng
    const [totalUsersResult] = await dbPool.query(
      "SELECT COUNT(id) AS count FROM users"
    );
    const totalUsers = totalUsersResult[0].count;

    // 4. L·∫•y ƒë∆°n ch·ªù x·ª≠ l√Ω
    const [pendingOrdersResult] = await dbPool.query(
      "SELECT COUNT(id) AS count FROM orders WHERE status = 'pending'"
    );
    const pendingOrders = pendingOrdersResult[0].count;

    res.json({
      success: true,
      stats: {
        totalOrders,
        totalRevenue,
        totalUsers,
        pendingOrders,
      },
    });
  } catch (error) {
    console.error("Admin stats error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y th·ªëng k√™!",
    });
  }
});
// Endpoint ki·ªÉm tra m·ªôt ƒë∆°n h√†ng c·ª• th·ªÉ
app.get("/api/admin/orders/:id/check", checkAdminAuth, async (req, res) => {
  try {
    const orderId = Number(req.params.id);

    // T√¨m ƒë∆°n h√†ng trong MySQL
    const [orders] = await dbPool.query("SELECT * FROM orders WHERE id = ?", [
      orderId,
    ]);
    const order = orders[0];

    res.json({
      requestedId: req.params.id,
      convertedId: orderId,
      found: !!order,
      order: order || null,
    });
  } catch (error) {
    res
      .status(500)
      .json({ success: false, message: "L·ªói khi ki·ªÉm tra ƒë∆°n h√†ng!" });
  }
});
// server.js (Kh√¥i ph·ª•c endpoint L·∫§Y T·∫§T C·∫¢ ƒê∆†N H√ÄNG)

app.get("/api/orders", checkAdminAuth, async (req, res) => {
  try {
    // 1. L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng, s·∫Øp x·∫øp m·ªõi nh·∫•t tr∆∞·ªõc
    const [allOrders] = await dbPool.query(
      "SELECT id, userId, items, customerName, customerPhone, customerEmail, customerNote, total, status, createdAt FROM orders ORDER BY createdAt DESC"
    );

    const formattedOrders = allOrders.map((order) => ({
      id: order.id,
      userId: order.userId,
      items: JSON.parse(order.items), // R·∫•t quan tr·ªçng: Chuy·ªÉn JSON string th√†nh Object
      customerInfo: {
        name: order.customerName,
        phone: order.customerPhone,
        email: order.customerEmail,
        note: order.customerNote,
      },
      total: Number(order.total), // Chuy·ªÉn Decimal/String sang Number
      status: order.status,
      createdAt: order.createdAt,
    }));

    res.json({ success: true, orders: formattedOrders });
  } catch (error) {
    console.error("Get /api/orders error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng!",
    });
  }
});

// server.js (Kh√¥i ph·ª•c endpoint L·∫§Y ƒê∆†N H√ÄNG C·ª¶A USER)

app.get("/api/users/:userId/orders", async (req, res) => {
  try {
    const userId = Number(req.params.userId);

    if (isNaN(userId)) {
      return res.status(400).json({
        success: false,
        message: "ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá!",
      });
    } // 1. L·∫•y ƒë∆°n h√†ng c·ªßa user, s·∫Øp x·∫øp m·ªõi nh·∫•t tr∆∞·ªõc

    const [userOrders] = await dbPool.query(
      "SELECT id, userId, items, customerName, customerPhone, customerEmail, customerNote, total, status, createdAt FROM orders WHERE userId = ? ORDER BY createdAt DESC",
      [userId]
    ); // 2. Format l·∫°i d·ªØ li·ªáu cho frontend (chuy·ªÉn JSON string th√†nh Object)

    const formattedOrders = userOrders.map((order) => ({
      id: order.id,
      userId: order.userId,
      items: JSON.parse(order.items),
      customerInfo: {
        name: order.customerName,
        phone: order.customerPhone,
        email: order.customerEmail,
        note: order.customerNote,
      },
      total: Number(order.total),
      status: order.status,
      createdAt: order.createdAt,
    }));

    res.json({
      success: true,
      orders: formattedOrders,
      total: formattedOrders.length,
    });
  } catch (error) {
    console.error("Get user orders error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng!",
    });
  }
});
// X√≥a ƒë∆°n h√†ng (admin only) - FIXED VERSION
app.delete("/api/admin/orders/:id", checkAdminAuth, async (req, res) => {
  try {
    const orderId = Number(req.params.id);

    if (isNaN(orderId)) {
      return res.status(400).json({
        success: false,
        message: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá!",
      });
    }

    // X√≥a ƒë∆°n h√†ng kh·ªèi MySQL
    const [deleteResult] = await dbPool.query(
      "DELETE FROM orders WHERE id = ?",
      [orderId]
    );

    if (deleteResult.affectedRows === 0) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!",
      });
    }

    console.log(`‚úÖ ƒê∆°n h√†ng #${orderId} ƒë√£ b·ªã x√≥a b·ªüi admin`);

    res.json({
      success: true,
      message: "X√≥a ƒë∆°n h√†ng th√†nh c√¥ng!",
      deletedOrder: { id: orderId },
    });
  } catch (error) {
    console.error("‚ùå Delete order error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi x√≥a ƒë∆°n h√†ng!",
      error: error.message,
    });
  }
});
// L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng (admin only)
app.get("/api/admin/orders", checkAdminAuth, async (req, res) => {
  try {
    // 1. L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng, s·∫Øp x·∫øp m·ªõi nh·∫•t tr∆∞·ªõc
    const [allOrders] = await dbPool.query(
      "SELECT id, userId, items, customerName, customerPhone, customerEmail, customerNote, total, status, createdAt FROM orders ORDER BY createdAt DESC"
    );

    // 2. Format l·∫°i d·ªØ li·ªáu cho frontend
    const formattedOrders = allOrders.map((order) => ({
      id: order.id,
      userId: order.userId,
      items: JSON.parse(order.items),
      customerInfo: {
        name: order.customerName,
        phone: order.customerPhone,
        email: order.customerEmail,
        note: order.customerNote,
      },
      total: Number(order.total),
      status: order.status,
      createdAt: order.createdAt,
    }));

    res.json({
      success: true,
      orders: formattedOrders,
    });
  } catch (error) {
    console.error("Admin get orders error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng!",
    });
  }
});

// L·∫•y t·∫•t c·∫£ users (admin only) - PHI√äN B·∫¢N M·ªöI V·ªöI TOTALSPENT
app.get("/api/admin/users", checkAdminAuth, async (req, res) => {
  try {
    // L·∫•y th√¥ng tin user (ƒë√£ c√≥ totalSpent v√† orderCount trong b·∫£ng)
    const [safeUsers] = await dbPool.query(
      "SELECT id, name, email, createdAt, totalSpent, orderCount FROM users ORDER BY createdAt DESC"
    );

    const formattedUsers = safeUsers.map((u) => ({
      id: u.id,
      name: u.name,
      email: u.email,
      createdAt: u.createdAt,
      totalSpent: Number(u.totalSpent) || 0,
      orderCount: u.orderCount || 0,
    }));

    res.json({
      success: true,
      users: formattedUsers,
    });
  } catch (error) {
    console.error("Admin get users error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng!",
    });
  }
});

// C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
app.patch("/api/admin/orders/:id", checkAdminAuth, async (req, res) => {
  try {
    const orderId = Number(req.params.id);
    const { status } = req.body;

    // 1. C·∫≠p nh·∫≠t tr·∫°ng th√°i
    const [updateResult] = await dbPool.query(
      "UPDATE orders SET status = ? WHERE id = ?",
      [status, orderId]
    );

    if (updateResult.affectedRows === 0) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!",
      });
    }

    // 2. N·∫øu tr·∫°ng th√°i l√† 'completed', C·∫¨P NH·∫¨T TH√îNG TIN USER
    if (status === "completed") {
      // a. L·∫•y th√¥ng tin ƒë∆°n h√†ng v·ª´a c·∫≠p nh·∫≠t
      const [orders] = await dbPool.query(
        "SELECT userId, total FROM orders WHERE id = ?",
        [orderId]
      );
      const order = orders[0];

      if (order) {
        const userId = order.userId;

        // b. T√≠nh to√°n l·∫°i t·ªïng chi ti√™u v√† s·ªë ƒë∆°n ho√†n th√†nh c·ªßa user
        const [stats] = await dbPool.query(
          "SELECT COUNT(id) AS orderCount, SUM(total) AS totalSpent FROM orders WHERE userId = ? AND status = 'completed'",
          [userId]
        );

        const { orderCount, totalSpent } = stats[0];

        // c. C·∫≠p nh·∫≠t l·∫°i user
        await dbPool.query(
          "UPDATE users SET totalSpent = ?, orderCount = ? WHERE id = ?",
          [Number(totalSpent) || 0, orderCount, userId]
        );

        console.log(
          `‚úÖ C·∫≠p nh·∫≠t user #${userId}: ${orderCount} ƒë∆°n, ${Number(
            totalSpent
          ).toLocaleString()}ƒë`
        );
      }
    }

    res.json({
      success: true,
      message:
        "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng v√† th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng!", // C·∫ßn l·∫•y l·∫°i d·ªØ li·ªáu m·ªõi nh·∫•t ƒë·ªÉ frontend c·∫≠p nh·∫≠t
      order: { id: orderId, status },
    });
  } catch (error) {
    console.error("‚ùå Update order error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng!",
    });
  }
});

// ===================== USER ROUTES =====================
// L·∫•y ƒë∆°n h√†ng c·ªßa user hi·ªán t·∫°i
app.get("/api/users/:userId/orders", async (req, res) => {
  try {
    const userId = Number(req.params.userId);

    if (isNaN(userId)) {
      return res.status(400).json({
        success: false,
        message: "ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá!",
      });
    }

    // 1. L·∫•y ƒë∆°n h√†ng c·ªßa user, s·∫Øp x·∫øp m·ªõi nh·∫•t tr∆∞·ªõc
    const [userOrders] = await dbPool.query(
      "SELECT id, userId, items, customerName, customerPhone, customerEmail, customerNote, total, status, createdAt FROM orders WHERE userId = ? ORDER BY createdAt DESC",
      [userId]
    );

    // 2. Format l·∫°i d·ªØ li·ªáu cho frontend (chuy·ªÉn JSON string th√†nh Object)
    const formattedOrders = userOrders.map((order) => ({
      id: order.id,
      userId: order.userId,
      // Chuy·ªÉn JSON string trong c·ªôt `items` th√†nh JavaScript object
      items: JSON.parse(order.items),
      customerInfo: {
        name: order.customerName,
        phone: order.customerPhone,
        email: order.customerEmail,
        note: order.customerNote,
      },
      total: Number(order.total), // Chuy·ªÉn Decimal sang Number
      status: order.status,
      createdAt: order.createdAt,
    }));

    res.json({
      success: true,
      orders: formattedOrders,
      total: formattedOrders.length,
    });
  } catch (error) {
    console.error("Get user orders error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng!",
    });
  }
});

app.post("/api/register", async (req, res) => {
  try {
    const { name, email, password } = req.body;

    // 1. Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
    const [existingUsers] = await dbPool.query(
      "SELECT id FROM users WHERE email = ?",
      [email]
    );

    if (existingUsers.length > 0) {
      return res.status(400).json({
        success: false,
        message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!",
      });
    }

    // 2. T·∫°o user m·ªõi
    const [result] = await dbPool.query(
      "INSERT INTO users (name, email, password) VALUES (?, ?, ?)",
      [name, email, password]
    );

    const newUserId = result.insertId;

    res.status(201).json({
      success: true,
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng!",
      user: { id: newUserId, name, email },
    });
  } catch (error) {
    console.error("Register error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server!",
    });
  }
});

app.post("/api/login", async (req, res) => {
  try {
    const { email, password } = req.body;

    const [users] = await dbPool.query(
      "SELECT id, name, email FROM users WHERE email = ? AND password = ?",
      [email, password]
    );
    const user = users[0];

    if (!user) {
      return res.status(401).json({
        success: false,
        message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!",
      });
    }

    // üî• LOGIC TH√ÄNH C√îNG B·ªä THI·∫æU
    res.json({
      success: true,
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      user: { id: user.id, name: user.name, email: user.email },
    });
  } catch (error) {
    console.error("Login error:", error);
    res.status(500).json({ success: false, message: "L·ªói server!" });
  }
});
// ===================== ORDER ROUTES =====================

app.post("/api/orders", async (req, res) => {
  try {
    const {
      userId,
      items,
      customerInfo,
      total,
      discountAmount = 0,
      couponCode = null,
    } = req.body; // <-- NH·∫¨N D·ªÆ LI·ªÜU M·ªöI

    const newOrderId = Date.now();
    const itemsJson = JSON.stringify(items); // 2. Ch√®n ƒë∆°n h√†ng (Th√™m 2 c·ªôt m·ªõi v√†o truy v·∫•n)

    await dbPool.query(
      "INSERT INTO orders (id, userId, items, customerName, customerPhone, customerEmail, customerNote, total, status, discountAmount, couponCode) VALUES (?, ?, ?, ?, ?, ?, ?, ?, 'pending', ?, ?)",
      [
        newOrderId,
        userId,
        itemsJson,
        customerInfo.name,
        customerInfo.phone,
        customerInfo.email,
        customerInfo.note,
        total,
        discountAmount, // <-- C·ªôt m·ªõi
        couponCode, // <-- C·ªôt m·ªõi
      ]
    );

    res.status(201).json({
      success: true,
      message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!",
      order: { id: newOrderId, ...req.body },
    });
  } catch (error) {
    console.error("Order creation error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi t·∫°o ƒë∆°n h√†ng!",
    });
  }
});

app.get("/api/orders", checkAdminAuth, async (req, res) => {
  try {
    // 1. L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng, s·∫Øp x·∫øp m·ªõi nh·∫•t tr∆∞·ªõc
    const [allOrders] = await dbPool.query(
      "SELECT id, userId, items, customerName, customerPhone, customerEmail, customerNote, total, status, createdAt FROM orders ORDER BY createdAt DESC"
    ); // 2. TH√äM LOGIC FORMAT D·ªÆ LI·ªÜU

    const formattedOrders = allOrders.map((order) => ({
      id: order.id,
      userId: order.userId,
      items: JSON.parse(order.items), // R·∫•t quan tr·ªçng: Chuy·ªÉn JSON string th√†nh Object
      customerInfo: {
        name: order.customerName,
        phone: order.customerPhone,
        email: order.customerEmail,
        note: order.customerNote,
      },
      total: Number(order.total), // Chuy·ªÉn Decimal/String sang Number
      status: order.status,
      createdAt: order.createdAt,
    }));

    res.json({ success: true, orders: formattedOrders });
  } catch (error) {
    console.error("Get /api/orders error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng!",
    });
  }
});

// ===================== CONTACT ROUTE =====================

// app.post("/api/contact", async (req, res) => {
//   try {
//     const { name, email, subject, message } = req.body;

//     await transporter.sendMail({
//       from: process.env.EMAIL_USER,
//       to: process.env.ADMIN_EMAIL || process.env.EMAIL_USER,
//       subject: `üìß Tin nh·∫Øn li√™n h·ªá: ${subject}`,
//       html: `
//         <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
//           <h2>üìß Tin nh·∫Øn li√™n h·ªá m·ªõi</h2>
//           <div style="background: #F3F4F6; padding: 20px; border-radius: 8px;">
//             <p><strong>T·ª´:</strong> ${name}</p>
//             <p><strong>Email:</strong> ${email}</p>
//             <p><strong>Ch·ªß ƒë·ªÅ:</strong> ${subject}</p>
//           </div>
//           <div style="margin: 20px 0; padding: 20px; background: white; border-left: 4px solid #4F46E5;">
//             <h3>N·ªôi dung:</h3>
//             <p>${message}</p>
//           </div>
//         </div>
//       `,
//     });

//     res.json({
//       success: true,
//       message: "Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!",
//     });
//   } catch (error) {
//     console.error("Contact error:", error);
//     res.status(500).json({
//       success: false,
//       message: "L·ªói khi g·ª≠i tin nh·∫Øn!",
//     });
//   }
// });

// ===================== HEALTH CHECK =====================

app.get("/api/health", (req, res) => {
  res.json({
    status: "OK",
    message: "Server is running",
    timestamp: new Date().toISOString(),
  });
});
// server.js (Th√™m route n√†y v√†o cu·ªëi file, tr∆∞·ªõc app.listen)

// ===================== COUPON ROUTES =====================

app.post("/api/coupons/validate", (req, res) => {
  const { couponCode } = req.body;
  const codeUpper = (couponCode || "").toUpperCase();

  const coupon = COUPONS.find((c) => c.code === codeUpper);

  if (coupon) {
    res.json({
      success: true,
      discount: coupon.discount,
      message: `√Åp d·ª•ng m√£ ${
        coupon.code
      } th√†nh c√¥ng! Gi·∫£m ${coupon.discount.toLocaleString()}ƒë.`,
    });
  } else {
    res.status(404).json({
      success: false,
      discount: 0,
      message: "M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá.",
    });
  }
});
app.listen(process.env.PORT, () => {
  console.log(`üöÄ Server is running on port ${PORT}`);
  console.log(`üìß Email: ${process.env.EMAIL_USER}`);
  console.log(`üîê Admin Email: ${ADMIN_EMAIL}`);
});
